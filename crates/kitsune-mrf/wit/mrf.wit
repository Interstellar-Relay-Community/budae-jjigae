/*
 * SPDX-FileCopyrightText: 2024 Aumetra Weisman <aumetra@cryptolab.net>
 *
 * SPDX-License-Identifier: AGPL-3.0-or-later
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package fep:mrf@1.0.0;

/// Home-grown version of wasi-keyvalue
/// 
/// Built around a synchronous interface since MRFs are synchronous in their current representation
interface keyvalue {
    /// Opaque representation of some error
    resource error {}

    /// Logical collection of Key-Value pairs
    resource bucket {
        /// Open or create a new bucket
        open: static func(name: string) -> result<bucket, error>;

         /// Get a value from a bucket
        get: func(key: string) -> result<option<list<u8>>, error>;

        /// Set the value inside a bucket
        ///
        /// Overwrites existing values silently
        set: func(key: string, value: list<u8>) -> result<_, error>;

        /// Delete the value from a bucket
        delete: func(key: string) -> result<_, error>;

        /// Check if a key exists in the bucket
        exists: func(key: string) -> result<bool, error>;
    }
}

interface types {
    /// The direction the activity is going
    enum direction {
        /// The activity is being received
        incoming,

        /// The activity is being sent out
        outgoing,
    }

    /// Error types
    variant error {
        /// Reject the activity
        reject,

        /// An error occurred but the processing can continue
        error-continue(string),

        /// An error occurred and the processing should not continue
        error-reject(string),
    }
}

world mrf {
    use types.{direction, error};

//    import keyvalue;
    import wasi:logging/logging;

    /// Transform an ActivityPub activity
    export transform: func(configuration: string, direction: direction, activity: string) -> result<string, error>;
}
